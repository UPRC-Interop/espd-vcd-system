
package eu.esens.espdvcd.builder;

import eu.esens.espdvcd.model.ESPDRequest;
import eu.esens.espdvcd.model.ESPDResponse;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

public class BuilderESPDTest {
    
    InputStream isReq;
    InputStream isRes;
    
    public BuilderESPDTest() {
    }
    
    @Before
    public void setUp() {
        isReq = BuilderESPDTest.class.getResourceAsStream("/espd-request.xml");
        Assert.assertNotNull(isReq);
        
        isRes = BuilderESPDTest.class.getResourceAsStream("/espd-response.xml");
        Assert.assertNotNull(isRes);
    }

    @Test
    public void createESPDRequestFromFile() throws Exception {
        
        ESPDBuilder espdBuiler = new ESPDBuilder();
        // Here we load an ESPD Request generated by the EU Service
        ESPDRequest espd = espdBuiler.createESPDRequestFromXML(isReq);
        Assert.assertNotNull(espd);

        // We create an XML from our simple model 
        String XML = espdBuiler.createXMLasString(espd);
        Assert.assertNotNull(XML);
    //    System.out.println(XML);
    }

    @Test
    public void createESPDResponseFromFile() throws Exception {
        
        ESPDBuilder espdBuiler = new ESPDBuilder();
        // Here we load an ESPD Request generated by the EU Service
        ESPDResponse espd = espdBuiler.createESPDResponseFromXML(isRes);
        Assert.assertNotNull(espd);

        // We create an XML from our simple model 
        String XML = espdBuiler.createXMLasString(espd);
        Assert.assertNotNull(XML);
//        System.out.println(XML);
    }
    
    @Test
    public void createESPDResponseFromESPDRequestFile() throws Exception {
        ESPDBuilder espdBuiler = new ESPDBuilder();
        // Here we load an ESPD Request generated by the EU Service
        ESPDResponse espd = espdBuiler.createESPDResponseFromXML(isReq);
        Assert.assertNotNull(espd);

        // We create an XML from our simple model 
        String XML = espdBuiler.createXMLasString(espd);
        Assert.assertNotNull(XML);
//        System.out.println(XML);
    }

    @Test
    public void deselectExclusionCriterion() throws Exception {

        ESPDBuilder espdBuiler = new ESPDBuilder();

        // Here we load an ESPD Request generated by the EU Service
      
        ESPDRequest originalEspd = espdBuiler.createESPDRequestFromXML(isReq);
        Assert.assertNotNull(originalEspd);

        // Deselect the first exclusion criterion
        originalEspd.getExclusionCriteriaList().get(0).setSelected(false);
        
        Assert.assertEquals(62,originalEspd.getFullCriterionList().size());

        // Count the number of selected exclusion criteria and the total number of exclusion criteria in the original espd request
        int originalEspdExclusionCriteriaCount = originalEspd.getExclusionCriteriaList().size();
        long originalCriteriaSelectedCount = originalEspd.getFullCriterionList().stream()
                .filter(c -> c.isSelected())
                .count();
        
        long originalCriteriaNotSelectedCount = originalEspd.getFullCriterionList().stream()
                .filter(c -> !c.isSelected())
                .count();
        
        Assert.assertEquals(62, originalCriteriaNotSelectedCount + originalCriteriaSelectedCount);
        Assert.assertEquals(1, originalCriteriaNotSelectedCount);
        Assert.assertEquals(61, originalCriteriaSelectedCount);
       
        // Export the ESPD Request to Xml string
        String exportedXml = espdBuiler.createXMLasString(originalEspd);

        ESPDRequest importedEspd;
        try ( // Reimport the ESPD Request from the Xml string
            InputStream stream = new ByteArrayInputStream(exportedXml.getBytes(StandardCharsets.UTF_8))) {
            importedEspd = espdBuiler.createESPDRequestFromXML(stream);
        }
        Assert.assertNotNull(importedEspd);

        // Count the number of selected exclusion criteria and the total number of exclusion criteria in the imported espd request
        long importedEspdExclusionCriteriaCount = importedEspd.getExclusionCriteriaList().size();
        long importedEspdExclusionCriteriaSelectedCount = importedEspd
                .getExclusionCriteriaList()
                .stream()
                .filter(c -> c.isSelected())
                .count();

        // Compare the number of selected exclusion criteria in espd and importedEspd
        Assert.assertEquals(originalEspdExclusionCriteriaCount, importedEspdExclusionCriteriaCount);
        Assert.assertNotEquals(originalCriteriaSelectedCount, importedEspdExclusionCriteriaSelectedCount);
    }
}
