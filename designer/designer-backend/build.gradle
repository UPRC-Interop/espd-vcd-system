import java.text.SimpleDateFormat

/**
 * Copyright 2016-2020 University of Piraeus Research Center
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 *     http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'application'
    id "org.ajoberstar.grgit" version "3.1.1"
}

final sourceCompatibility = 1.11
final mainClassName = 'eu.esens.espdvcd.designer.Server'
applicationDefaultJvmArgs = ["--add-opens", "java.base/java.lang=ALL-UNNAMED"]

dependencies {
    implementation project(':builder')
    implementation project(':codelists')
    implementation project(':model')
    implementation project(':validator')
    implementation project(':edm')
// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // https://mvnrepository.com/artifact/javax.validation/validation-api
    implementation 'javax.validation:validation-api:2.0.1.Final'
// https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator
    implementation 'org.hibernate.validator:hibernate-validator:7.0.1.Final'

// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.0'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.0'
    implementation 'com.sparkjava:spark-core:2.9.3'
 // https://mvnrepository.com/artifact/com.typesafe/config
    implementation group: 'com.typesafe', name: 'config', version: '1.3.3'
}

/**
 * * * * * RUN TASKS * * * * *
 */

run {
    this.mainClassName = mainClassName
    dependsOn "buildWebApp"
    finalizedBy "deleteWebAppResources"
}

task runBackendOnly(type: JavaExec) {
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    applicationDefaultJvmArgs = ["--add-opens", "java.base/java.lang=ALL-UNNAMED"]

}

task runWebApp(type: Exec) {
    dependsOn "npmInstallWebApp"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "ng.cmd", "serve"
    } else {
        commandLine "ng", "serve"
    }
}

/**
 * * * * * JAR TASKS * * * * *
 */
configurations.implementation.setCanBeResolved(true)

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes "Main-Class": mainClassName
    }

    doFirst {
        from { configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) } }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

installDist{
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}


task jarWithFrontend(type: Jar) {
    dependsOn "buildWebAppDeploy"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE


    manifest {
        attributes "Main-Class": mainClassName
    }

    doFirst {
        from { configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) } }
    }
    from sourceSets.main.runtimeClasspath
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    finalizedBy "deleteWebAppResources"
}


task createJarFromExistingResources(type: Jar) {
    dependsOn "copyWebAppResources"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE


    manifest {
        attributes "Main-Class": mainClassName
    }

    doFirst {
        from { configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) } }
    }
    from sourceSets.main.runtimeClasspath
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    finalizedBy "deleteWebAppResources"
}

/**
 * * * * * BUILD TASKS * * * * *
 */

task npmInstallWebApp(type: Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
//    group = BasePlugin.BUILD_GROUP
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "npm.cmd", "install"
    } else {
        commandLine "npm", "install"
    }
}

task buildWebApp(type: Exec) {
    dependsOn "npmInstallWebApp"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
//    group = BasePlugin.BUILD_GROUP
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "ng.cmd", "build"
    } else {
        commandLine "ng", "build"
    }
    doLast {
        copy {
            from "$webappDir/dist"
            into "$projectDir/src/main/resources/public"
        }
    }
}

task buildWebAppDeploy(type: Exec) {
    dependsOn "npmInstallWebApp"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
//    group = BasePlugin.BUILD_GROUP
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "ng.cmd", "build", "--prod", "--optimization", "--build-optimizer",  "--subresource-integrity"
    } else {
        commandLine "ng", "build", "--prod", "--optimization", "--build-optimizer",  "--subresource-integrity"
    }
    doLast {
        copy {
            from "$webappDir/dist"
            into "$projectDir/src/main/resources/public"
        }
    }
}

task buildWebAppDeploySnf(type: Exec) {
    dependsOn "npmInstallWebApp"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
//    group = BasePlugin.BUILD_GROUP
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "ng.cmd", "build", "--configuration=snf"
    } else {
        commandLine "ng", "build", "--configuration=snf"
    }
    doLast {
        copy {
            from "$webappDir/dist"
            into "$projectDir/src/main/resources/public"
        }
    }
}

task buildWebAppDeploySnfDev(type: Exec) {
    dependsOn "npmInstallWebApp"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
//    group = BasePlugin.BUILD_GROUP
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "ng.cmd", "build", "--configuration=snf-dev"
    } else {
        commandLine "ng", "build", "--configuration=snf-dev"
    }
    doLast {
        copy {
            from "$webappDir/dist"
            into "$projectDir/src/main/resources/public"
        }
    }
}

task buildWebAppDeployGSCCPDev(type: Exec) {
    dependsOn "npmInstallWebApp"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
//    group = BasePlugin.BUILD_GROUP
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "ng.cmd", "build", "--configuration=snf-gsccp-dev"
    } else {
        commandLine "ng", "build", "--configuration=snf-gsccp-dev"
    }
    doLast {
        copy {
            from "$webappDir/dist"
            into "$projectDir/src/main/resources/public"
        }
    }
}

/**
 * * * * * HELPER TASKS * * * * *
 */


task deleteWebAppResources {
    doLast {
        delete "$webappDir/dist"
        delete "$projectDir/src/main/resources/public"
    }
}

task copyWebAppResources {
    doFirst {
        copy {
            from "$webappDir/dist"
            into "$projectDir/src/main/resources/public"
        }
    }
}

task generateVersionFile {
    doLast {
        file("$projectDir/src/main/resources/application.version").text = """
eu.esens.espdvcd.build.version="$version"
eu.esens.espdvcd.build.revision=${grgit.open(dir: "${rootProject.projectDir}").head().id}
eu.esens.espdvcd.build.time="${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}"
eu.esens.espdvcd.build.name="ESPD/VCD System"
"""
    }
}

compileJava.dependsOn generateVersionFile
jar.dependsOn ':edm:edm102:build'
jar.dependsOn ':edm:edm202:build'
jar.dependsOn ':edm:edm210:build'
jar.dependsOn ':edm:common:build'
